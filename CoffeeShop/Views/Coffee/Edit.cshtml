@model CoffeeShop.Models.ViewModels.CreateCoffeeViewModel
<div class="container">
    <section">
        @using (Html.BeginForm("Edit", "Coffee", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.CoffeeId);
            @Html.HiddenFor(x => x.QuantityInStock);

            <h4 class="mt-3">Edit coffee</h4>
            <div class="hr"><hr /></div>
            <div class="row container">
                <div class="col-md-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                        <div>
                            <textarea class="form-control rounded-0" name="description" rows="3">@Model.Description</textarea>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.BasePrice, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.BasePrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BasePrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.IncomeCoef, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.IncomeCoef, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IncomeCoef, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(model => model.ImgUrl)
                        @Html.LabelFor(model => model.ImgUrl, htmlAttributes: new { @class = "control-label" })
                        Current image: <br />
                        <img src="@Model.ImgUrl" class="editImg" style="width:70%"/>
                        <br /><br />
                        <div class="form-group">
                            <label for="file">Upload new image:</label>
                            <input type="file" id="file" class="btn btn-danger" name="file" style="width: 100%;" />
                        </div>
                    </div>
                </div>
                @{
                    if (Model.availableIngredients.Count != 0)
                    {
                        <div class="col-md-7">
                            <label class="row font-weight-bold ml-2">Choose your ingredients: </label><br />
                            @{var i = 0;}
                            @foreach (var item in Model.availableIngredients)
                            {
                                <div class="form-group">
                                    @{
                                        var shouldCheck = Model.selectedIngredients.Any(x => x == item.Ingredient.IngredientId.ToString()) ? "checked" : "";
                                        var val = "0";
                                        if (shouldCheck == "checked")
                                        {
                                            val = Model.selectedIngredientsQuantity.ElementAt(@i).ToString();
                                            i++;
                                        }
                                    }
                                    <div class="m-1 d-inline-block">
                                        <label class="container_new" for="@item.Ingredient.IngredientId">
                                            @item.Ingredient.Name
                                            <input type="checkbox" value="@item.Ingredient.IngredientId" name="selectedIngredients" id="@item.Ingredient.IngredientId" @shouldCheck class="ing_check" autocomplete="off" />
                                            <span class="checkmark"></span>
                                        </label>
                                        <div class="div_check" style="display:none">
                                            <label class="container_new" for="@item.QuantityInCoffee">
                                                @Html.LabelFor(m => item.QuantityInCoffee, htmlAttributes: new { @class = "control-label" })
                                            </label>
                                            @{
                                                bool usedIngredient = Model.selectedIngredients.Contains(item.Ingredient.IngredientId.ToString());
                                            }
                                            <input type="number" name="selectedIngredientsQuantity" min="0" max="@item.Ingredient.QuantityInStock?usedIngredient:@item.QuantityInCoffee" step="1" value=@val class="form-control" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10 ">
                    <input type="submit" value="Save" class="btn btn-warning" />
                    @Html.ActionLink("Back to List", "Index", routeValues: null, htmlAttributes: new { @class = "btn btn-primary" })
                </div>
            </div>

        }
</div>

@section Styles {
    <link href="@Url.Content("~/Styles/Checkbox.css")" rel="stylesheet" type="text/css" />
}

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".ing_check").each(function () {
                el = $(this);
                var div = el.parent().next(".div_check");
                if (el.prop("checked") == true) {
                    div.show();
                }
            });
           
            $(".ing_check").click(function () {
                var el = $(this);
                var div = $(this).parent().next(".div_check");
                var inputField = div.children()[1];
                if (el.prop("checked") == true && inputField.getAttribute("value")=="0") {
                    inputField.setAttribute("value",1);
                }
                else {
                    inputField.setAttribute("value", 0);
                }
                div.toggle();
            });
            });
    </script>
}